name: I14Y Test Harvester ABN

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight
  workflow_dispatch:  # Allows manual triggering

jobs:
  harvest-data:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Get or refresh token
      id: get-token
      run: |
        python - <<EOF
        import requests
        import os
        import json

        def get_token_with_refresh(client_key,client_key_secret,refresh_token):
            data = {
                'grant_type': 'refresh_token',
                'refresh_token': refresh_token,
            }
            response = requests.post('${{ secrets.URL_TOKEN_REFRESH }}', data=data, verify=False, auth=(client_key,client_key_secret))
            if response.status_code >= 400:
              raise Exception("Failed to get token")
            return response.json()
        
        try: 
          with open('refresh_token.json', 'r') as f:
            stored_data = json.load(f)
            refresh_token = stored_data['refresh_token']
            use_count = stored_data['use_count']
        except FileNotFoundError:
          refresh_token = '${{ secrets.INITIAL_REFRESH_TOKEN }}'
          use_count = 0

        result = get_token_with_refresh('${{ secrets.CLIENT_KEY }}','${{ secrets.CLIENT_KEY_SECRET }}', refresh_token)

        use_count += 1
        with open('refresh_token.json', 'w') as f:
          json.dump({
            'refresh_token': result['refresh_token'],
            'use_count': use_count
          },f)
        
        print(f"::set-output name=access_token::{result['access_token']}")

        if use_count >= 2:
          print("::warning::Refresh token used twice, make a manual refresh")
        EOF

    - name: Run harvester script
      env:
        CLIENT_KEY: ${{ secrets.CLIENT_KEY }}
        CLIENT_KEY_SECRET: ${{ secrets.CLIENT_KEY_SECRET }}
        GET_ENDPOINT_FROM: ${{ secrets.GET_ENDPOINT_FROM }}
        GET_ENDPOINT_TO: ${{ secrets.GET_ENDPOINT_TO }}
        POST_ENDPOINT: ${{ secrets.POST_ENDPOINT }}
        URL_TOKEN_REFRESH: ${{ secrets.URL_TOKEN_REFRESH }}
        INITIAL_REFRESH_TOKEN: ${{ secrets.INITIAL_REFRESH_TOKEN }}
        ACCESS_TOKEN: ${{ steps.get-token.outputs.access_token }}
      run: python scripts/i14y-test/harvester.py

    - name: Store refresh token
      uses: actions/upload-artifact@v4
      with:
        name: refresh-token
        path: refresh_token.json
        retention-days: 1
    
    - name: Upload log
      uses: actions/upload-artifact@v4
      with:
        name: harvest-log
        path: harvest_log.txt

    - name: Upload updated data
      uses: actions/upload-artifact@v4
      with:
        name: data-json
        path: data/data.json
        retention-days: 1
